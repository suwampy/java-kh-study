<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- 자동 빈 스캐닝
		지정 된 패키지에 있는 @Component와 그 구체화 요소들을 스캔하여 bean으로 등록하는 기능 -->
	<context:component-scan base-package="com.kh.spring" />

	<!-- 어노테이션을 통한 AOP 적용을 위한 설정 -->
	<aop:aspectj-autoproxy/>
	
	<!-- 기존 xml 빈 등록 방식으로 login.do 요청을 처리한다면
		HandlerMapping과 Controller를 명시적으로 bean 등록해야 함 -->
	<!-- HandlerMapping 등록 -->
	<!-- <beans:bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
		<beans:property name="mappings">
			<beans:props>
				<beans:prop key="login.do">login</beans:prop>
				<beans:prop key="logout.do">logout</beans:prop>
			</beans:props>
		</beans:property>
	</beans:bean> -->
	<!-- 위의 HandlerMapping에 해당하는 각각의 Controller 등록 -->
	<!-- <beans:bean id="login" class="com.kh.spring.member.controller.LoginController"/>
	<beans:bean id="logout" class="com.kh.spring.member.controller.LogoutController"/> -->
	
	<!-- 
		위와 같이 작업 한 후 각각의 기능에 해당하는 각 Controller 클래스를 만들어서 메소드로 작업해야 함
		이 방식은 해당 설정 파일에 등록 된 bean들을 한 눈에 볼 수 있어 관리의 편의성이 높지만
		bean 개수가 많아지만 xml 파일을 관리하기 어려워지며 여러 개발자가 같은 설정 파일을 수정하면
		충돌이 발생하기 쉽다.
		
		==> 어노테이션을 이용한 방식으로 변경
		
		내가 작업하는 클래스 위에 @Controller, 메소드 위에 @RequestMapping("url-pattern")
		을 붙여줌으로써 <annotation-driven/> <context:component-scan>이 자동으로
		어노테이션이 붙어있는 것들을 스캔해서 빈으로 등록시켜준다.
		
		XML 방식처럼 각 기능에 맞는 controller 클래스들을 따로 만들어줄 필요가 없고
		하나의 controller로 통합하여 메소드 별로 각 기능이 실행되도록 작업하면 된다.
		
	 -->
	 
	 <!-- ajax 이후 추가 -->
	 <beans:bean id="jsonView" class="net.sf.json.spring.web.servlet.view.JsonView"/>
	
	<beans:bean id="viewResolver" class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<beans:property name="order" value="0"/>
	</beans:bean>
	
	<!-- interceptor -->
	<!-- <interceptors>
		LoggerInterceptor
		<interceptor>
			<mapping path="/*"/>
			<beans:bean id="loggerInterceptor"
			class="com.kh.spring.common.interceptor.LoggerInterceptor"/>
		</interceptor>
		LoginInterceptor
		<interceptor>
			<mapping path="/*list.do"/>
			<beans:bean id="loginInterceptor"
			class="com.kh.spring.common.interceptor.LoginInterceptor"/>
		</interceptor>
	</interceptors> -->
	
	<task:annotation-driven/>
</beans:beans>
